
//extGWT
//переход на другую страницу из Ineractive.java
Window.Location.assign("http://localhost:8084/unicuspst/index.htm
//----------------------


//----------------------------------------
//Ведение логов
//----------------------------------------
import org.apache.log4j.Logger;
import org.apache.commons.logging.LogFactory;
//protected final Log logger = LogFactory.getLog(getClass());
private static Logger log = Logger.getLogger("DataGridController");
log.warn("txt_log");
//-------------------------------------------


//---------------------anotation-------------------
//Типы данных, Преобразования
//----------------------------------------
Long.toString
String.valueOf(
.toString().equals("root")
toString().equalsIgnoreCase

//преобразование строкового представления числа в целое значение:
Integer.parseInt( строка )
Long.parseLong( строка )

//преобразование строкового представления числа в тип Float/Double значение:
    * Float.parseFloat ( строка )
    * Double.parseDouble ( строка )

//но возвращают не числовые значения, а объекты соответствующих оболочечных типов

    * Byte.valueOf ( строка )
    * Short.valueOf ( строка )
    * Integer.valueOf ( строка )
    * Long.valueOf ( строка )
    * Float.valueOf ( строка )
    * Double.valueOf ( строка )

//преобразовать последовательность бит, образующее некое целое значение, в число типа float
Float.intBitsToFloat(0x7F7FFFFF) даст максимальное значение типа float

//возвращают знак числа
Integer.signum ( число )
Long.signum ( число )
//в пакете java.lang
Math.PI или Math.sin(x)
Math.pow(a,b).
//Float.MIN_VALUE, Float.MAX_VALUE, Double.MIN_VALUE, Double.MAX_VALUE
//----------------------------------------------------------------------

//----------------------------------------
//ВАЖНО !!!! equals а не ==
//----------------------------------------
Double d1=1.0,d2=1.0;
System.out.println("d1==d2 ="+(d1==d2));
System.out.println("d1.equals(d2) ="+(d1.equals(d2)));
Первая строка вывода даст d1==d2 =false, а вторая d1.equals(d2) =true
//----------------------------------------------------------------------

//----------------------------------------
//Перечисления
//----------------------------------------
enum Monthes(ИмяТипа) {jan,feb,mar,apr,may,jun,jul,aug,sept,oct,nov,dec};
ИмяТипа.ordinal() - возвращающая порядковый номер элемета в перечислении
ИмяТипа.compareTo(), позволяющая сравнивать два элемента перечисления - она возвращает разницу в их порядковых номерах.
ИмяТипа.name() Строковое представление значения
ИмяТипа.values() – она возвращает массив элементов, к которым можно обращаться по индексу.
//----------------------------------------



//----------------------------------------
//Нижняя панель перехода по гриду
//----------------------------------------
tbPaging = new PagingToolBar(5);
tbPaging.bind(loader);
PagingLoadConfig config = new BasePagingLoadConfig();
config.setOffset(0);
config.setLimit(5);
config.setSortField((String) state.get("sortField"));
config.setSortDir(Style.SortDir.valueOf((String) state.get("sortDir")));
loader.load(config); //�������� ������
//----------------------------------------

//----------------------------------------
//Формирование "загружчиков для грида"
//----------------------------------------
BeanModelReader reader = getBeanModelReader();
loader = new BasePagingLoader<PagingLoadResult<ModelData>>(proxy, reader);
store = new ListStore<BeanModel>(loader);
loader.setRemoteSort(true);
//----------------------------------------


//----------------------------------------
//Собития сигнал слушатель
//----------------------------------------
Button.addSelectionListener(new SelectionListener<ButtonEvent>() {

            @Override
            public void componentSelected(ButtonEvent ce) {
                addUser();
            }
        });

//----------------------------------------


//----------------------------------------
//Доступность кнопок редактирования в окне редктирования
//----------------------------------------
//Задаем свойства отображения кнопок редактирования в файле GWTmodileServiceImpl
//ConfigurationManager.getInstance()
//getProperty() получаем свойсто
//setConfig("controls.edit.visible", "true"); задаем свойству значение
//----------------------------------------


//----------------------------------------
//просмотр списка
//----------------------------------------
List<Integer> ids;
for(Integer id : ids)
{
            //
}
//----------------------------------------


//----------------------------------------
//кнопка с асинхронным вызовом  функции на сервере
//----------------------------------------
private GWTDataGridServiceAsync service = GWT.create(GWTDataGridService.class);
Button b = new Button("Нажми меня...");
         SelectionListener<ButtonEvent> sl;
         sl = new SelectionListener<ButtonEvent>() {
             @Override
             public void componentSelected(ButtonEvent ce) 
             {
                  MessageBox.alert("Нажата кнопка", "Вы нажали кнопку", null);                     
                  
                  AsyncCallback<List<DataGrid>> callback = new AsyncCallback<List<DataGrid>>() 
                  {
                    public void onSuccess(List<DataGrid> result) 
                    {
                        for (DataGrid d : result)
                        {
                            MessageBox.alert("", d.getName(), null);
                        }
                    }
            
                    public void onFailure(Throwable caught) 
                    {
                        MessageBox.alert("", caught.getMessage(), null);
                    }
                   };
                 
                  service.getAllDataGrid(callback);
              }
           }; 
          b.addSelectionListener(sl);
          add(b);
//----------------------------------------

//----------------------------------------
Команды документации (символы метаданных):
//----------------------------------------
    * @see ("смотри") - применяется для создания в документе гиперссылок на другие комментарии. Можно использовать для любых конструкций (классов, методов и т.д. ). Формат использования: @see ИмяКласса - для класса; @see ИмяКласса.ИмяПеречисления - для типа-перечисления, заданного в классе; @see ИмяКласса#ИмяЧлена - для метода или переменной; для интерфейса - аналогично классу. При этом имя класса или интерфейса может быть либо коротким, либо квалифицировано именем пакета.
    * @version ("версия") - информация о версии. Используется для классов и интерфейсов. Формат использования: @version Информация о версии в произвольной форме.
    * @author ("автор") - Информация об авторе. Используется для классов и интерфейсов. Формат использования: @author Информация об авторе в произвольной форме. Может включать не только имя, но и данные об авторских правах, а также об электронной почте автора, его сайте и т.д.
    * @since ("начиная с") - Информация о версии JDK, начиная с которой введен или работоспособен класс или интерфейс. Формат использования: @since Информация в произвольной форме.
    * @param (сокращение от parameter -"параметр") - информация о параметре метода. Комментарий /** @param … */ ставится в месте декларации метода в списке параметров перед соответствующим параметром. Формат использования: @param ИмяПараметра Описание.
    * @return ("возвращает") - информация о возвращаемом методом значении и его типе. Формат использования: @return Информация в произвольной форме.
    * @throws ("возбуждает исключение") - информация об исключительных ситуациях, которые могут возбуждаться методом. Формат использования: @throws ИмяКлассаИсключения Описание.
    * @deprecated ("устаревшее") - информация о том, что данный метод устарел и в последующих версиях будет ликвидирован. При попытке использования таких методов компилятор выдает программисту предупреждение ( warning ) о том, что метод устарел, хотя и компилирует проект. Формат использования: @deprecated Информация в произвольной форме.
//----------------------------------------



//----------------------------------------
//Модификаторы
//----------------------------------------
public final //объявление константы (переменная доступная только для чтнеия
public final int MAX1=255;
Модификатор static означает, что это переменная класса(а не объекта)

%	Оператор остатка от целочисленного деления
/	Оператор деления	i/j	Результат округляется до целого путем отбрасывания дробной части как для положительных, так и для отрицательных чисел.




//Модификаторы функций:
    * Правила доступа к методу ( private, protected, public ). Если модификатор не задан, действует доступ по умолчанию – так называемый пакетный.
    * Принадлежность к методам класса ( static ). Если модификатор не задан, считается, что это метод объекта.
    * Невозможность переопределения метода в потомках ( final ). Если модификатор не задан, считается, что это метод можно переопределять в классах-потомках.
    * Способ реализации ( native – заданный во внешней библиотеке DLL, написанной на другом языке программирования; abstract – абстрактный, не имеющий реализации). Если модификатор не задан, считается, что это обычный метод.
    * Синхронизацию при работе с потоками ( synchronized ) .
//Модификаторы, которые можно использовать:
    * public – модификатор, задающий публичный (общедоступный) уровень видимости. Если он отсутствует, действует пакетный уровень доступа - класс доступен только элементам того же пакета.
    * abstract – модификатор, указывающий, что класс является абстрактным, то есть у него не бывает экземпляров (объектов). Обязательно объявлять класс абстрактным в случае, если какой-либо метод объявлен как абстрактный.
    * final – модификатор, указывающий, что класс является окончательным ( final ) , то есть что у него не может быть потомков.

Примитивный тип	Оболочечный класс
byte	Byte
short	Short
char	Character
int	Integer
long	Long
float	Float
double	Double 
имяТипаValue()

super. имяПоля или super. имяМетода(список параметров). Слово super в этих случаях означает сокращение от superclass.
//----------------------------------------

//----------------------------------------
//Управляющие конструкции
//----------------------------------------
if(условие)
  оператор1;
else
  оператор2;

switch(выражение){
  case значение1: операторы1;break;
  ……………………………
  case значениеN: операторы N;break;
  default: операторы;
}

j=(i<5)?(i+1):(i+2)

//++
Например, присваивания j=i++ и j=++i дадут разные результаты. Если первоначально i=0, то первое присваивание даст 0, так как i увеличится на 1 после выполнения присваивания. А второе даст 1, так как сначала выполнится инкремент, и только потом будет вычисляться выражение и выполняться присваивание. При этом в обоих случаях после выполнения присваивания i станет равно 1.

for(int i=1,j=5; i+j<100; i++,j=i+2*j){
  ...
};

Пока условие сохраняет значение true — в цикле выполняется оператор, иначе — действие цикла прекращается. Если условие с самого начала false, цикл сразу прекращается, и тело цикла не выполнится ни разу.
while(условие)
    оператор;

Если условие принимает значение false, цикл прекращается. Тело цикла выполняется до проверки условия, поэтому оно всегда выполнится хотя бы один раз.
do
  оператор;
while(условие);

//Операторы прерывания 
continue, break, return, System.exit

    * continue; – прерывание выполнения тела цикла и переход к следующей итерации (проверке условия) текущего цикла;
    * continue имя метки; – прерывание выполнения тела цикла и переход к следующей итерации (проверке условия) цикла, помеченного меткой ( label );
    * break; – выход из текущего цикла;
    * break имя метки; – выход из цикла, помеченного меткой;
    * return; – выход из текущей подпрограммы (в том числе из тела цикла) без возврата значения;
    * return значение; – выход из текущей подпрограммы (в том числе из тела цикла) с возвратом значения;
    * System.exit(n) –выход из приложения с кодом завершения n. Целое число n произвольно задается программистом. Если n=0, выход считается нормальным, в других случаях - аварийным. Приложение перед завершением сообщает число n операционной системе для того, чтобы программист мог установить, по какой причине произошел аварийный выход.
//----------------------------------------


//----------------------------------------
//Особенности работы со строками
//----------------------------------------
//Классы StringBuffer или StringBuilder
public void calcName3(StringBuffer name) {
    count++;
    name.append(count);
    System.out.println("Новое значение="+name);
}

StringBuffer sbComponentName=new StringBuffer();
{sbComponentName.append("myComponent");}

private void jButton8ActionPerformed(java.awt.event.ActionEvent evt){
    calcName3(sbComponentName);
    System.out.println("sbComponentName="+sbComponentName);
//----------------------------------------


//----------------------------------------
//Массивы
//----------------------------------------
java.util.List components= java.util.Arrays.asList(this.getComponents());
for (Iterator iter = components.iterator();iter.hasNext();) {
      Object elem = (Object) iter.next();
      javax.swing.JOptionPane.showMessageDialog(null,"Компонент: "+
                                                 elem.toString());
}

Iterator iter = collection.iterator()

У итераторов имеются следующие три метода:

    * boolean hasNext() - дает информацию, имеется ли в коллекции следующий объект.
    * Object next() – возвращает ссылку на следующий объект коллекции.
    * void remove() – удаляет из коллекции текущий объект, то есть тот, ссылка на который была получена последним вызовом next().
//--------------------------------

}














//----------------------------------------
Базовый класс Object
//----------------------------------------
Класс Object является базовым для всех классов Java. Поэтому все его поля и методы наследуются и содержатся во всех классах. В классе Object содержатся следующие методы:

    * public Boolean equals(Object obj) – возвращает true в случае, когда равны значения объекта, из которого вызывается метод, и объекта, передаваемого через ссылку obj в списке параметров. Если объекты не равны, возвращается false. В классе Object равенство рассматривается как равенство ссылок и эквивалентно оператору сравнения "==". Но в потомках этот метод может быть переопределен, и может сравнивать объекты по их содержимому. Например, так происходит для объектов оболочечных числовых классов. Это легко проверить с помощью такого кода:

      Double d1=1.0,d2=1.0;
      System.out.println("d1==d2 ="+(d1==d2));
      System.out.println("d1.equals(d2) ="+(d1.equals(d2)));

      Первая строка вывода даст d1==d2 =false, а вторая d1.equals(d2) =true
    * public int hashCode() – выдает хэш-код объекта. Хэш-кодом называется условно уникальный числовой идентификатор, сопоставляемый какому-либо элементу. Из соображений безопасности выдавать адрес объекта прикладной программе нельзя. Поэтому в Java хэш-код заменяет адрес объекта в тех случаях, когда для каких-либо целей надо хранить таблицы адресов объектов.
    * protected Object clone() throws CloneNotSupportedException – метод занимается копированием объекта и возвращает ссылку на созданный клон (дубликат) объекта. В наследниках класса Object его обязательно надо переопределить, а также указать, что класс реализует интерфейс Clonable. Попытка вызова метода из объекта, не поддерживающего клонирования, вызывает возбуждение исключительной ситуации CloneNotSupportedException ("Клонирование не поддерживается"). Про интерфейсы и исключительные ситуации будет рассказано в дальнейшем.

      Различают два вида клонирования: мелкое ( shallow ), когда в клон один к одному копируются значения полей оригинального объекта, и глубокое ( deep ), при котором для полей ссылочного типа создаются новые объекты, клонирующие объекты, на которые ссылаются поля оригинала. При мелком клонировании и оригинал, и клон будут ссылаться на одни и те же объекты. Если объект имеет поля только примитивных типов, различия между мелким и глубоким клонированием нет. Реализацией клонирования занимается программист, разрабатывающий класс, автоматического механизма клонирования нет. И именно на этапе разработки класса следует решить, какой вариант клонирования выбирать. В подавляющем большинстве случаев требуется глубокое клонирование.
    * public final Class getClass() – возвращает ссылку на метаобъект типа класс. С его помощью можно получать информацию о классе, к которому принадлежит объект, и вызывать его методы класса и поля класса.
    * protected void finalize() throws Throwable – вызывается перед уничтожением объекта. Должен быть переопределен в тех потомках Object, в которых требуется совершать какие-либо вспомогательные действия перед уничтожением объекта (закрыть файл, вывести сообщение, отрисовать что-либо на экране, и т.п.). Подробнее об этом методе говорится в соответствующем параграфе.
    * public String toString() – возвращает строковое представление объекта (настолько адекватно, насколько это возможно). В классе Object этот метод реализует выдачу в строку полного имени объекта (с именем пакета), после которого следует символ '@', а затем в шестнадцатеричном виде хэш-код объекта. В большинстве стандартных классов этот метод переопределен. Для числовых классов возвращается строковое представление числа, для строковых – содержимое строки, для символьного – сам символ (а не строковое представление его кода!). 
    * notify(), notifyAll(), и несколько перегруженных вариантов метода wait, предназначенные для работы с потоками (threads)
//----------------------------------------


//----------------------------------------
//Обработки исключительных ситуаций
//----------------------------------------
try-catch-finally
double x, z;
    try{
        x=Double.parseDouble(s);
        z=Math.sqrt(x/y);
    } catch(ArithmeticException e){
        System.out.println("Деление на ноль");
    } catch(NumberFormatException e){
        System.out.println("Корень из отрицательного числа!");
    }
//прим
class WrongPasswordException extends Exception {
   WrongPasswordException(){ // конструктор
     System.out.println("Wrong password!");
   }
}
......
throw new WrongPasswordException();

классами-потомками объектного типа Throwable
От Throwable наследуются классы Error ("Ошибка") и Exception ("Исключение")
 Экземплярами класса Error являются непроверяемые исключительные ситуации, которые невозможно перехватить в блоках catch. Такие исключительные ситуации представляют катастрофические ошибки, после которых невозможна нормальная работа приложения. Экземплярами класса Exception и его потомков являются проверяемые исключительные ситуации. Кроме одного потомка – класса RuntimeException (и его потомков). Имя этого класса переводится как "Исключительные ситуации времени выполнения".

Классы исключительных ситуаций либо предопределены в стандартных пакетах (существуют исключительные ситуации ArithmeticException для арифметических операций в пакете java.lang, IOException в пакете java.io, и так далее), либо описываются пользователем как потомки класса Exception или его потомков.

В Java типы-исключения принято именовать, оканчивая имя класса на "Exception" ("Исключение") для проверяемых исключений или на "Error" ("Ошибка") для непроверяемых.


//---------------------------
//Dictionary
//В переменной Dictionary храняться активные javascript  объекты
//они создаются в commonGWT.ftl и в ModuleController.java
//---------------------------
java.lang.Object
  extended by com.google.gwt.i18n.client.Dictionary



Provides dynamic string lookup of key/value string pairs defined in a module's host HTML page. Each unique instance of Dictionary is bound to a named JavaScript object that resides in the global namespace of the host page's window object. The bound JavaScript object is used directly as an associative array.

For example, suppose you define the following JavaScript object in your host page:

    var CurrentTheme = {
      highlightColor: "#FFFFFF",
      shadowColor: "#808080",
      errorColor: "#FF0000",
      errorIconSrc: "stopsign.gif"
    };

You can then use a Dictionary to access the key/value pairs above:

    public void useThemeDictionary() {
      Dictionary theme = Dictionary.getDictionary("CurrentTheme");

      String highlightColor = theme.get("highlightColor");
//---------------------------

//---------------------------
//tomcat
//---------------------------
для входа в http://localhost:8084/manager - панель управления tomcat-ом необходимо в файле 
C:\Documents and Settings\Admin\.netbeans\7.1\apache-tomcat-7.0.22.0_base\conf\tomcat-users.xml
создать пользователя с правами manager-gui, а для запуска приложения с правами manager-script

<role rolename="tomcat"/>
  <role rolename="role1"/>
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <user username="tomcat" password="tomcat" roles="tomcat,manager-gui,manager-script"/>
  <user username="both" password="tomcat" roles="tomcat,role1"/>
  <user username="role1" password="tomcat" roles="role1"/>











Итераторы

HashMap имеет встроенные итераторы, такие, что вы можете получить список всех ключей keySet(), 
всех значений values() или же все пары ключ/значение entrySet(). 
Ниже представлены некоторые варианты для перебора элементов:
// 1.
for (Map.Entry<String, String> entry: hashmap.entrySet())
    System.out.println(entry.getKey() + " = " + entry.getValue());

// 2.
for (String key: hashmap.keySet())
    System.out.println(hashmap.get(key));

// 3.
Iterator<Map.Entry<String, String>> itr = hashmap.entrySet().iterator();
while (itr.hasNext())
    System.out.println(itr.next());



//---------------------------------
//пример расположения кнопок справа (setHBoxLayoutAlign и  setPack)
//---------------------------------

        LayoutContainer bottom = new LayoutContainer();
        HBoxLayout layoutBottom = new HBoxLayout();
        layoutBottom.setHBoxLayoutAlign(HBoxLayoutAlign.MIDDLE);
        layoutBottom.setPack(BoxLayoutPack.END);
        bottom.setLayout(layoutBottom);

        Button bOpenDataGrid = new Button(constants.btnOpenDataGrid(), AbstractImagePrototype.create(images.book()) ,buttonEventListener);
        bOpenDataGrid.setItemId("open");

        Button bClearData = new Button(constants.btnClearDataGrid(), AbstractImagePrototype.create(images.cancel()) ,buttonEventListener);
        bClearData.setItemId("clear");
         
        HBoxLayoutData layoutData = new HBoxLayoutData(new Margins(0, 5, 0, 0));
        bottom.add(bOpenDataGrid, layoutData);
        bottom.add(bClearData, layoutData);

//---------------------------------------------
//обработака событий
handler - обработчик
event - событие(сигнал)

//создаем подписчика на сигнал (слушателя сигнала)
object.addListener(Events.Select, new Listener<ObjectEvent>() {

            @Override
            public void handleEvent(ObjectEvent be) {
               ........
            }
        });

//посылка сигнала
Listener listener;
 ObjectEvent event = new ObjectEvent(...);
                //event.
                event.setType(eventType);
                listener.handleEvent(event);


//некоторые объекты (напр. ContentPanel) имеют метод 
    fireEvent ( EventType type )  (издать сигнал)
или fireEvent ( EventType eventType, BaseEvent be ) и др.
//------------------------------------------------




//-------------------------------------------------------
//растягивания компонент HBoxLayoutData ( ) по горизонтали в HBoxLayout - те
//-------------------------------------------------------
setFlex(0);//компонент не будет растягиваться  (по умолчанию)
если не 0 то будет согласно пропорции 
padding - обивка
(setStyleAttribute("padding", "5px"));
margins - поля
(
\



















СБОРКА


Лида и А.В. я настроил сервер CI по адресу http://109.74.139.148:9090/hudson/
логин.пароль rav/rav
[11:40:09 AM | Изменены 11:40:35 AM] Кожин Александр: lkhorosheva/lkhorosheva
[11:40:36 AM] Андрей Розенберг: объясните мне, тупому, попонятне, сто такое "сервер CI"?
[11:40:54 AM] Кожин Александр: это непрерывная интеграции
[11:41:15 AM] Кожин Александр: контроль версий - сборка-тестирование-развертывание
[11:41:24 AM] Андрей Розенберг: Ура!
[11:41:39 AM] Андрей Розенберг: Спасибо
[11:41:42 AM] Кожин Александр: там есть текущий проект
[11:42:04 AM] Кожин Александр: желательно зайти и как минимум сменить пароль
[11:42:16 AM] Кожин Александр: как максимум попробовать собрать проект
[11:42:37 AM] Андрей Розенберг: т.е. то, что обновляется - появляется в svn будет "автоматически" обновляться в текущей версии Системы?
[11:42:58 AM] Кожин Александр: сборка включает в себя выкачивание последних изменений из svn,  компиляциюю и развертывание на боевой сервер с БД road1
[11:43:20 AM] Андрей Розенберг: я боюсь - предлагаю поручить это Лиде
[11:43:58 AM] Кожин Александр: она сделает ровно то же самое - просто попробуйте для теста - кнопочка - "Запланировать Сборку"
[11:44:14 AM] Кожин Александр: теперь про периодичность
[11:44:39 AM] Кожин Александр: текущая версия - она же получается и для тестирования и для всего
[11:44:52 AM] Андрей Розенберг: ну да
[11:45:15 AM] Кожин Александр: можно сделать по-разному
-сборка послле каждого коммита
-регулярная(например раз в час или ночная)
[11:45:24 AM] Кожин Александр: -по требованию (как сейчас)
[11:45:57 AM] Андрей Розенберг: давайте, пока, оставим - по требованию
[11:46:03 AM] Кожин Александр: хорошо
[11:46:10 AM] Кожин Александр: тогда на этом пока все
[11:48:47 AM] Андрей Розенберг: нажал - жду
[11:49:12 AM] Кожин Александр: можете вывод консоли посмотреть
[11:49:20 AM] Кожин Александр: там такой черный значек
Андрей Розенберг

//ЗАПУСК ТОМКЭТА НА МОСКОВСКОМ СЕРВЕРЕ
у тебя есть rdp
[10:22:07 AM] Кожин Александр: данные?
[10:24:08 AM] Кожин Александр: запустился
[10:24:15 AM] Кожин Александр: алгоритм такой
[10:25:23 AM] Кожин Александр: 1.заходим по rdp
2. запускаем cmd
3. переходим d:/dev/env/apache-tomcat-xxx/bin/
4.catalina.bat start
[10:27:02 AM] lidahorosheva: а настрокойки доступа по rdp, там юзер пароль ?
[10:28:21 AM] Кожин Александр: of
[10:28:25 AM] Кожин Александр: да
[10:28:28 AM] Кожин Александр: сейчас скину
[10:28:46 AM] Кожин Александр: RDP
109.74.139.148 
username : elt_spb 
pass : bingo 
server : testsrv



//-------------------------------------------------------
//НОВЫЕ ПУТИ 
//-------------------------------------------------------
http://redmine.elt-poisk.com/
http://mm.elt-poisk.com/hudson/job/unicusweb/
http://mm.elt-poisk.com/unicuspst/
Оракл - local.elt-poisk.com порт 1521


//-------------------------------------------------------
//ПЕРЕЗАПУСК ТОМКЭТА 04.10.2012
//-------------------------------------------------------
можно тебя попросить зайти по rdp и перезапустить сервер
[10/3/2012 9:29:44 AM] lidahorosheva: хорошо, только не помню как, а там пароли не менялись
[10/3/2012 9:30:06 AM] Кожин Александр: вроде local.elt-poisk.com
[10/3/2012 9:30:31 AM] Кожин Александр: username : elt_spb 
pass : bingo 
server : testsrv
[10/3/2012 9:33:46 AM] Кожин Александр: выбери сервер
[10/3/2012 9:33:56 AM] Кожин Александр: testsrv
[10/3/2012 9:34:45 AM] lidahorosheva: все вошла и что дальше делать
[10/3/2012 9:35:07 AM] Кожин Александр: Пуск - Администрирование - Службы
[10/3/2012 9:35:22 AM] Кожин Александр: там есть Tomcat MM
[10/3/2012 9:35:27 AM] Кожин Александр: надо перезапустить



//---------------------------------
//ТОМКЭТА - МЕНЕДЖЕР
//--------------------------------
http://mm.elt-poisk.com/manager/
<user username="tomcat" password="12345qwerttomcat" roles="manager-script,admin" />
<user username="manager" password="12345qwertmanager" roles="manager-gui,admin" />



//--------------------------------------
//СЛИЯНИЯ ВЕТОК SVN
//--------------------------------------
сделал слияние
[3:16:44 PM] Кожин Александр: можешь немного ознакомиться тут http://tortoisesvn.net/docs/release/TortoiseSVN_ru/tsvn-dug-merge.html
[3:17:53 PM] Кожин Александр: а по шагам - так:
1. делаем checkout ветки В КОТОРУЮ будем добавлять
2. выбираем merge
3. указываем диапазон ревизий
4. tets merge для надежности
5. merge
6. commit
[3:17:57 PM] Кожин Александр: complete




//--------------------------------------
Работа с GIT
//--------------------------------------
http://bitbucket.org/

git clone git@bitbucket.org:akozhin/park-management-system.git

Отправка
git pull

